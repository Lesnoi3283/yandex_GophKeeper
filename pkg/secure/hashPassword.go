package secure

import (
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"golang.org/x/crypto/scrypt"
)

// scrypt params.
const (
	n       = 1 << 15
	r       = 8
	p       = 1
	keyLen  = 32
	saltLen = 32
)

// HashPassword hashes password using "scrypt" with salt, generated by "crypto/rand" library.
// Also, it encodes hash to readable format using Base64.
// Returns hash, salt and an error.
func HashPassword(password []byte) (hash string, salt []byte, err error) {
	//gen salt
	_, err = rand.Read(salt)
	if err != nil {
		return "", nil, fmt.Errorf("unable to generate salt: %w", err)
	}

	//hash password
	hashBytes, err := scrypt.Key(password, salt, n, r, p, keyLen)
	if err != nil {
		return "", nil, fmt.Errorf("unable to hash password: %w", err)
	}

	//make password hash readable
	hash = base64.StdEncoding.EncodeToString(hashBytes)
	return hash, salt, nil
}
