// Code generated by MockGen. DO NOT EDIT.
// Source: required_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "GophKeeper/internal/app/entities"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyKeeper is a mock of KeyKeeper interface.
type MockKeyKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockKeyKeeperMockRecorder
}

// MockKeyKeeperMockRecorder is the mock recorder for MockKeyKeeper.
type MockKeyKeeperMockRecorder struct {
	mock *MockKeyKeeper
}

// NewMockKeyKeeper creates a new mock instance.
func NewMockKeyKeeper(ctrl *gomock.Controller) *MockKeyKeeper {
	mock := &MockKeyKeeper{ctrl: ctrl}
	mock.recorder = &MockKeyKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyKeeper) EXPECT() *MockKeyKeeperMockRecorder {
	return m.recorder
}

// GetKey mocks base method.
func (m *MockKeyKeeper) GetKey(dataType, userID, dataID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", dataType, userID, dataID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockKeyKeeperMockRecorder) GetKey(dataType, userID, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockKeyKeeper)(nil).GetKey), dataType, userID, dataID)
}

// RemoveKey mocks base method.
func (m *MockKeyKeeper) RemoveKey(dataType, userID, dataID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKey", dataType, userID, dataID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveKey indicates an expected call of RemoveKey.
func (mr *MockKeyKeeperMockRecorder) RemoveKey(dataType, userID, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKey", reflect.TypeOf((*MockKeyKeeper)(nil).RemoveKey), dataType, userID, dataID)
}

// SetKey mocks base method.
func (m *MockKeyKeeper) SetKey(dataType, userID, dataID, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKey", dataType, userID, dataID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKey indicates an expected call of SetKey.
func (mr *MockKeyKeeperMockRecorder) SetKey(dataType, userID, dataID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockKeyKeeper)(nil).SetKey), dataType, userID, dataID, key)
}

// MockEncryptor is a mock of Encryptor interface.
type MockEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptorMockRecorder
}

// MockEncryptorMockRecorder is the mock recorder for MockEncryptor.
type MockEncryptorMockRecorder struct {
	mock *MockEncryptor
}

// NewMockEncryptor creates a new mock instance.
func NewMockEncryptor(ctrl *gomock.Controller) *MockEncryptor {
	mock := &MockEncryptor{ctrl: ctrl}
	mock.recorder = &MockEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptor) EXPECT() *MockEncryptorMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockEncryptor) Decrypt(key string, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", key, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncryptorMockRecorder) Decrypt(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncryptor)(nil).Decrypt), key, data)
}

// Encrypt mocks base method.
func (m *MockEncryptor) Encrypt(key string, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", key, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptorMockRecorder) Encrypt(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptor)(nil).Encrypt), key, data)
}

// MockBankCardStorage is a mock of BankCardStorage interface.
type MockBankCardStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBankCardStorageMockRecorder
}

// MockBankCardStorageMockRecorder is the mock recorder for MockBankCardStorage.
type MockBankCardStorageMockRecorder struct {
	mock *MockBankCardStorage
}

// NewMockBankCardStorage creates a new mock instance.
func NewMockBankCardStorage(ctrl *gomock.Controller) *MockBankCardStorage {
	mock := &MockBankCardStorage{ctrl: ctrl}
	mock.recorder = &MockBankCardStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankCardStorage) EXPECT() *MockBankCardStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBankCardStorage) Get(ctx context.Context, cardID int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, cardID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBankCardStorageMockRecorder) Get(ctx, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBankCardStorage)(nil).Get), ctx, cardID)
}

// Save mocks base method.
func (m *MockBankCardStorage) Save(ctx context.Context, userID int, cardData []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userID, cardData)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockBankCardStorageMockRecorder) Save(ctx, userID, cardData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBankCardStorage)(nil).Save), ctx, userID, cardData)
}

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockUserManager) Auth(ctx context.Context, user entities.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockUserManagerMockRecorder) Auth(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockUserManager)(nil).Auth), ctx, user)
}

// Create mocks base method.
func (m *MockUserManager) Create(ctx context.Context, user entities.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserManagerMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserManager)(nil).Create), ctx, user)
}

// MockJWTHelper is a mock of JWTHelper interface.
type MockJWTHelper struct {
	ctrl     *gomock.Controller
	recorder *MockJWTHelperMockRecorder
}

// MockJWTHelperMockRecorder is the mock recorder for MockJWTHelper.
type MockJWTHelperMockRecorder struct {
	mock *MockJWTHelper
}

// NewMockJWTHelper creates a new mock instance.
func NewMockJWTHelper(ctrl *gomock.Controller) *MockJWTHelper {
	mock := &MockJWTHelper{ctrl: ctrl}
	mock.recorder = &MockJWTHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTHelper) EXPECT() *MockJWTHelperMockRecorder {
	return m.recorder
}

// BuildNewJWTString mocks base method.
func (m *MockJWTHelper) BuildNewJWTString(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildNewJWTString", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildNewJWTString indicates an expected call of BuildNewJWTString.
func (mr *MockJWTHelperMockRecorder) BuildNewJWTString(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildNewJWTString", reflect.TypeOf((*MockJWTHelper)(nil).BuildNewJWTString), userID)
}

// GetUserID mocks base method.
func (m *MockJWTHelper) GetUserID(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockJWTHelperMockRecorder) GetUserID(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockJWTHelper)(nil).GetUserID), token)
}
